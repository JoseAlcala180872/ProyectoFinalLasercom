package com.proyectofinallasercom.Pantallas;

import java.time.LocalDate;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import dominio.Actividad;
import java.util.List;
import bo.ActividadBO;
import bo.ClienteBO;
import dao.ActividadDAO;
import excepciones.BOException;
import java.awt.Component;
import java.math.BigDecimal;
import java.text.NumberFormat;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import dao.ClienteDAO;
import dominio.Cliente;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Estadisticas extends javax.swing.JFrame {
    LocalDate fInicial = LocalDate.MIN;
    LocalDate fFinal = LocalDate.MAX;
    DefaultTableModel modelo = new DefaultTableModel();
    private List<Actividad> listaActividades;
    private List<Cliente> listaClientes;
    private final ActividadBO actividadBO;
    private final ClienteBO clienteBO;
    //regex
    Pattern pattern = Pattern.compile("^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\\d\\d$");
    Matcher matcher;

    public Estadisticas() {
        actividadBO = new ActividadBO(new ActividadDAO());
        clienteBO = new ClienteBO(new ClienteDAO());
        initComponents();

        // Inicializar el modelo de tabla
        modelo = new DefaultTableModel(
                new Object[][]{},
                new String[]{"Título", "Fecha Terminada", "Cliente", "Monto"}
        );

        // Configurar la tabla
        jTable1.setModel(modelo);

        // Configurar ancho de columnas (opcional pero recomendado)
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(150); // Título
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(100); // Fecha
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(120); // Cliente
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(80);  // Monto

        cargarClientes();
        try {
            File f = new File("src/main/java/com/proyectofinallasercom/Pantallas/resources/fondo.png");

            BufferedImage image = ImageIO.read(f);

            lblFondo.setIcon(new ImageIcon(image));
        } catch (IOException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFondo = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        lblFechaInicial = new javax.swing.JLabel();
        txtFechaInicial = new javax.swing.JTextField();
        btnConfirmar = new javax.swing.JButton();
        lblFechaFinal = new javax.swing.JLabel();
        txtFechaFinal = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblCliente = new javax.swing.JLabel();
        cboxCliente = new javax.swing.JComboBox<>();
        lblMonto = new javax.swing.JLabel();
        txtMonto = new javax.swing.JTextField();
        btnSalir = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();
        lblFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Estadisticas");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlFondo.setOpaque(false);

        lblTitulo.setFont(new java.awt.Font("Century Gothic", 1, 36)); // NOI18N
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Estadisticas");

        lblFechaInicial.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        lblFechaInicial.setText("Fecha inicial");

        txtFechaInicial.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        txtFechaInicial.setText("05/05/2025");
        txtFechaInicial.setToolTipText("dd/mm/aaaa");
        txtFechaInicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFechaInicialActionPerformed(evt);
            }
        });

        btnConfirmar.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        lblFechaFinal.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        lblFechaFinal.setText("Fecha Final");

        txtFechaFinal.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        txtFechaFinal.setText("10/05/2025");
        txtFechaFinal.setToolTipText("dd/mm/aaaa");

        jTable1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Titulo", "Fecha Terminada", "Cliente", "Monto"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        lblCliente.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        lblCliente.setText("Cliente:");

        cboxCliente.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        cboxCliente.setMaximumRowCount(10);
        cboxCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboxCliente.setToolTipText("Seleccione un cliente para filtrar (opcional)");

        lblMonto.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        lblMonto.setText("Monto en periodo:");

        txtMonto.setEditable(false);
        txtMonto.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N

        btnSalir.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        btnExportar.setFont(new java.awt.Font("Century Gothic", 0, 24)); // NOI18N
        btnExportar.setText("Exportar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFondoLayout = new javax.swing.GroupLayout(pnlFondo);
        pnlFondo.setLayout(pnlFondoLayout);
        pnlFondoLayout.setHorizontalGroup(
            pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFondoLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(pnlFondoLayout.createSequentialGroup()
                        .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlFondoLayout.createSequentialGroup()
                        .addComponent(cboxCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlFondoLayout.createSequentialGroup()
                        .addComponent(lblCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblTitulo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlFondoLayout.createSequentialGroup()
                        .addGroup(pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFechaInicial, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(lblFechaInicial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(48, 48, 48)
                        .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addGroup(pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFechaFinal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFechaFinal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(205, 205, 205))
        );
        pnlFondoLayout.setVerticalGroup(
            pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFondoLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(lblTitulo)
                .addGap(32, 32, 32)
                .addGroup(pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(pnlFondoLayout.createSequentialGroup()
                            .addComponent(lblFechaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(txtFechaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(btnConfirmar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlFondoLayout.createSequentialGroup()
                        .addComponent(lblFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(txtFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboxCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(pnlFondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExportar, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        getContentPane().add(pnlFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 750));
        getContentPane().add(lblFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, 750));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        // Verificar si hay datos en la tabla
        if (modelo.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No hay datos para exportar",
                "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Crear un selector de archivos
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar PDF");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos PDF (*.pdf)", "pdf"));
        fileChooser.setSelectedFile(new File("reporte_actividades.pdf"));

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String filePath = fileToSave.getAbsolutePath();

            // Asegurarse de que la extensión sea .pdf
            if (!filePath.toLowerCase().endsWith(".pdf")) {
                filePath += ".pdf";
            }

            try {
                exportarAPDF(filePath);
                JOptionPane.showMessageDialog(this, "Reporte exportado exitosamente a:\n" + filePath,
                    "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error al exportar el PDF: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        new Menu().setVisible(true);
        dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed

        // si la fecha inicial o final no estan llenadas, entonces no tiene limite
        // es decir, si se tiene la fecha inicial del 12/02/2024 y no tiene final
        // se va a mostrar cada tarea de ese dia y adelante
        // si no tiene inicial pero tiene una final de 12/02/2024
        // se muestra cada tarea antes de esa fecha
        // si las dos fechas estan vacias, se muestras todos los registros
        // o le avisamos al usuario que debe llenar una fecha
        // ustedes deciden.
        try {
            //            // Obtener fechas de los campos
            //            String strFechaInicial = txtFechaInicial.getText().trim();
            //            String strFechaFinal = txtFechaFinal.getText().trim();
            //
            //            // Validar que no estén vacías
            //            if (strFechaInicial.isEmpty() || strFechaFinal.isEmpty()) {
                //                JOptionPane.showMessageDialog(this, "Debe especificar ambas fechas",
                    //                        "Error", JOptionPane.ERROR_MESSAGE);
                //                return;
                //            }

            // Convertir a LocalDate
            //            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            //            LocalDate fechaInicial = LocalDate.parse(strFechaInicial, formatter);
            //            LocalDate fechaFinal = LocalDate.parse(strFechaFinal, formatter);
            if (!validacionFechas(txtFechaInicial.getText(), txtFechaFinal.getText())) {
                return;
            }

            // Obtener cliente seleccionado (Filtro opcional, no se casen con el
                Cliente clienteFiltro = null;
                if (cboxCliente.getSelectedIndex() > 1) { // No es opcion vacia
                    String nombreCliente = cboxCliente.getSelectedItem().toString();
                    clienteFiltro = listaClientes.stream()
                    .filter(c -> c.getNombre().equals(nombreCliente))
                    .findFirst()
                    .orElse(null);
                }

                // Obtener actividades
                List<Actividad> actividades = actividadBO.obtenerActividadesEntreFechas(
                    parseFecha(txtFechaInicial.getText()),
                    parseFecha(txtFechaFinal.getText()),
                    clienteFiltro
                );

                // Mostrar en tabla
                mostrarActividadesEnTabla(actividades);

            } catch (DateTimeParseException e) {
                JOptionPane.showMessageDialog(this, "Formato de fecha inválido. Use dd/MM/yyyy",
                    "Error", JOptionPane.ERROR_MESSAGE);
            } catch (BOException e) {
                JOptionPane.showMessageDialog(this, e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error inesperado: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void txtFechaInicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaInicialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaInicialActionPerformed

    /**
     * Metodo para parsear fechas de String a LocalDate.
     *
     * @param fechaStr String fecha a parsear a LocalDate.
     * @return Fecha parseada a LocalDate.
     */
    private LocalDate parseFecha(String fechaStr) throws DateTimeParseException {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        return LocalDate.parse(fechaStr, formatter);
    }

    /**
     * Metodo para validar el rango de fechas.
     *
     * @param fInicial Fecha inicial del rango.
     * @param fFinal Fecha final del rango.
     * @return True en caso de que sea un rango valido, False en caso de que sea
     * un rango invalido.
     */
    private boolean validarRangoFechas(LocalDate fInicial, LocalDate fFinal) {
        if (fInicial != null && fFinal != null && fInicial.isAfter(fFinal)) {
            JOptionPane.showMessageDialog(this, "La fecha inicial no puede ser mayor que la fecha final", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    /**
     * Metodo para mostrar las actividades en tabla.
     *
     * @param actividades
     */
    private void mostrarActividadesEnTabla(List<Actividad> actividades) {
        // Verificar si hay datos
        if (actividades == null || actividades.isEmpty()) {
            modelo.setRowCount(0); // Limpiar tabla
            txtMonto.setText("0.00");
            return;
        }

        // 2. Debug: Verificar los datos recibidos
        System.out.println("Datos recibidos para mostrar:");
        actividades.forEach(act -> System.out.println(
                "Título: " + act.getTitulo()
                + ", Cliente: " + (act.getCliente() != null ? act.getCliente().getNombre() : "null")
                + ", Monto: " + act.getMonto()
        ));

        // Configurar el modelo de tabla
        modelo.setRowCount(0); // Limpiar tabla existente
        BigDecimal montoTotal = BigDecimal.ZERO;
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        // Configurar renderizador para la tabla
        jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                // Formatear montos como moneda
                if (value instanceof BigDecimal) {
                    value = NumberFormat.getCurrencyInstance().format(value);
                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        });

        // Llenar la tabla
        for (Actividad act : actividades) {
            try {
                Object[] rowData = {
                    act.getTitulo() != null ? act.getTitulo() : "",
                    act.getFechaRealTermino() != null
                    ? act.getFechaRealTermino().format(dateFormatter) : "N/A",
                    act.getCliente() != null ? act.getCliente().getNombre() : "Sin cliente",
                    act.getMonto() != null ? act.getMonto() : BigDecimal.ZERO
                };

                modelo.addRow(rowData);

                if (act.getMonto() != null) {
                    montoTotal = montoTotal.add(act.getMonto());
                }
            } catch (Exception e) {
                System.err.println("Error procesando actividad: " + e.getMessage());
                e.printStackTrace();
            }
        }

        // Actualizar UI
        txtMonto.setText(NumberFormat.getCurrencyInstance().format(montoTotal));

        // Forzar actualización de la tabla
        jTable1.setModel(modelo);
        jTable1.revalidate();
        jTable1.repaint();

        // Debug: Verificar el modelo
        System.out.println("Modelo actual - Filas: " + modelo.getRowCount());
        for (int i = 0; i < modelo.getRowCount(); i++) {
            System.out.println("Fila " + i + ": "
                    + modelo.getValueAt(i, 0) + " | "
                    + modelo.getValueAt(i, 1) + " | "
                    + modelo.getValueAt(i, 2) + " | "
                    + modelo.getValueAt(i, 3));
        }
    }

    private void cargarClientes() {
        try {
            listaClientes = clienteBO.listarTodosLosClientes();
            cboxCliente.removeAllItems();
            cboxCliente.addItem(""); // Opcion vacia para no filtrar
            cboxCliente.addItem("-- Todos los clientes --");

            // Ordenar alfabeticamente
            listaClientes.sort((c1, c2) -> c1.getNombre().compareToIgnoreCase(c2.getNombre()));
            
            for (Cliente cliente : listaClientes) {
                cboxCliente.addItem(cliente.getNombre());
            }
        } catch (BOException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar clientes: " + e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * Método para exportar los datos de la tabla a un archivo PDF
     *
     * @param filePath Ruta del archivo PDF a generar
     * @throws DocumentException
     * @throws IOException
     */
    private void exportarAPDF(String filePath) throws DocumentException, IOException {
        // Crear el documento
        Document document = new Document(PageSize.A4.rotate()); // Horizontal para mejor visualización de la tabla
        PdfWriter.getInstance(document, new FileOutputStream(filePath));

        document.open();

        // Configurar fuentes
        Font titleFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD, BaseColor.BLUE);
        Font headerFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD, BaseColor.WHITE);
        Font cellFont = new Font(Font.FontFamily.HELVETICA, 10);
        Font totalFont = new Font(Font.FontFamily.HELVETICA, 12, Font.BOLD);

        // Agregar título
        Paragraph title = new Paragraph("Reporte de Actividades", titleFont);
        title.setAlignment(Element.ALIGN_CENTER);
        title.setSpacingAfter(20f);
        document.add(title);

        // Agregar período del reporte
        Paragraph periodo = new Paragraph(
                "Período: " + txtFechaInicial.getText() + " al " + txtFechaFinal.getText(),
                new Font(Font.FontFamily.HELVETICA, 12)
        );
        periodo.setAlignment(Element.ALIGN_CENTER);
        periodo.setSpacingAfter(15f);
        document.add(periodo);

        // Crear tabla con las mismas columnas que la tabla Swing
        PdfPTable table = new PdfPTable(4);
        table.setWidthPercentage(100);
        table.setSpacingBefore(10f);
        table.setSpacingAfter(10f);

        // Configurar anchos de columnas (relativos)
        float[] columnWidths = {3f, 2f, 3f, 2f};
        table.setWidths(columnWidths);

        // Agregar encabezados de tabla
        addPdfTableHeader(table, "Título", headerFont);
        addPdfTableHeader(table, "Fecha Terminada", headerFont);
        addPdfTableHeader(table, "Cliente", headerFont);
        addPdfTableHeader(table, "Monto", headerFont);

        // Agregar datos de la tabla
        BigDecimal montoTotal = BigDecimal.ZERO;

        for (int i = 0; i < modelo.getRowCount(); i++) {
            String titulo = (String) modelo.getValueAt(i, 0);
            String fecha = (String) modelo.getValueAt(i, 1);
            String cliente = (String) modelo.getValueAt(i, 2);
            BigDecimal monto = (BigDecimal) modelo.getValueAt(i, 3);

            addPdfTableCell(table, titulo, cellFont);
            addPdfTableCell(table, fecha, cellFont);
            addPdfTableCell(table, cliente, cellFont);
            addPdfTableCell(table, monto.toString(), cellFont);

            montoTotal = montoTotal.add(monto);
        }

        document.add(table);

        // Agregar total general
        Paragraph total = new Paragraph(
                "Total en período: " + txtMonto.getText(),
                totalFont
        );
        total.setAlignment(Element.ALIGN_RIGHT);
        total.setSpacingBefore(10f);
        document.add(total);

        // Cerrar el documento
        document.close();
    }

    /**
     * Método auxiliar para agregar celdas de encabezado a la tabla PDF
     */
    private void addPdfTableHeader(PdfPTable table, String text, Font font) {
        PdfPCell cell = new PdfPCell(new Phrase(text, font));
        cell.setBackgroundColor(BaseColor.BLUE);
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setPadding(5);
        table.addCell(cell);
    }

    /**
     * Método auxiliar para agregar celdas normales a la tabla PDF
     */
    private void addPdfTableCell(PdfPTable table, String text, Font font) {
        PdfPCell cell = new PdfPCell(new Phrase(text, font));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setPadding(5);
        table.addCell(cell);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Estadisticas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Estadisticas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Estadisticas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Estadisticas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Estadisticas().setVisible(true);
            }
        });
    }

    public boolean validacionFechas(String fechaInicial, String fechaFinal) {
        if (!fechaInicial.trim().isEmpty()) {
            matcher = pattern.matcher(fechaInicial);
            boolean matchFound = matcher.find();

            if (!matchFound) {
                JOptionPane.showMessageDialog(this, "Por favor de insertar fecha valida (dd/mm/aaaa)", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            // se divide la fecha en partes en un arreglo
            String[] fechaInicialSplit = fechaInicial.split("/");

            // y se hace una fecha normal
            fInicial = LocalDate.of(Integer.parseInt(fechaInicialSplit[2]), Integer.parseInt(fechaInicialSplit[1]), Integer.parseInt(fechaInicialSplit[0]));
        } // en el caso de que este vacio el campo, el valor inicial
        // es igual al valor minimo posible        
        else {
            fInicial = LocalDate.MIN;
        }

        if (!fechaFinal.trim().isEmpty()) {
            matcher = pattern.matcher(fechaFinal);
            boolean matchFound = matcher.find();

            if (!matchFound) {
                JOptionPane.showMessageDialog(this, "Por favor de insertar fecha valida (dd/mm/aaaa)", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }

            String[] fechaFinalSplit = fechaFinal.split("/");
            fFinal = LocalDate.of(Integer.parseInt(fechaFinalSplit[2]), Integer.parseInt(fechaFinalSplit[1]), Integer.parseInt(fechaFinalSplit[0]));
        } else {
            fFinal = LocalDate.MAX;
        }

        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cboxCliente;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblCliente;
    private javax.swing.JLabel lblFechaFinal;
    private javax.swing.JLabel lblFechaInicial;
    private javax.swing.JLabel lblFondo;
    private javax.swing.JLabel lblMonto;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JPanel pnlFondo;
    private javax.swing.JTextField txtFechaFinal;
    private javax.swing.JTextField txtFechaInicial;
    private javax.swing.JTextField txtMonto;
    // End of variables declaration//GEN-END:variables
}
